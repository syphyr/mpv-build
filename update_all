#cd mpv-build

echo ""
echo "Rebasing libarchive"
echo ""

cd libarchive
git checkout 3.5
git fetch origin
git log --pretty="%C(yellow)%h %C(green)(%cr) %C(red)(%ar) %C(white)%s %C(blue)(%an)" -10 origin/3.5
git rebase origin/3.5

echo ""
echo "Rebasing dav1d"
echo ""

cd ../dav1d
git checkout master
git fetch origin
git log --pretty="%C(yellow)%h %C(green)(%cr) %C(red)(%ar) %C(white)%s %C(blue)(%an)" -10 origin/master
git rebase origin/master

echo ""
echo "Rebasing libass"
echo ""

cd ../libass
git checkout master
git fetch origin
git log --pretty="%C(yellow)%h %C(green)(%cr) %C(red)(%ar) %C(white)%s %C(blue)(%an)" -10 origin/master
git rebase origin/master

echo ""
echo "Rebasing libmysofa"
echo ""

cd ../libmysofa
git checkout master
git fetch origin
git log --pretty="%C(yellow)%h %C(green)(%cr) %C(red)(%ar) %C(white)%s %C(blue)(%an)" -10 origin/master
git rebase origin/master

echo ""
echo "Rebasing avisynth"
echo ""

cd ../avisynth
git checkout master
git fetch origin
git log --pretty="%C(yellow)%h %C(green)(%cr) %C(red)(%ar) %C(white)%s %C(blue)(%an)" -10 origin/master
git rebase origin/master
git submodule update --init --recursive --rebase

echo ""
echo "Rebasing freetype2"
echo ""

cd ../freetype2
git checkout master
git fetch origin
git log --pretty="%C(yellow)%h %C(green)(%cr) %C(red)(%ar) %C(white)%s %C(blue)(%an)" -10 origin/master
git rebase origin/master
git submodule update --init --recursive --rebase

echo ""
echo "Rebasing fribidi"
echo ""

cd ../fribidi
git checkout master
git fetch origin
git log --pretty="%C(yellow)%h %C(green)(%cr) %C(red)(%ar) %C(white)%s %C(blue)(%an)" -10 origin/master
git rebase origin/master

echo ""
echo "Rebasing harfbuzz"
echo ""

cd ../harfbuzz
git checkout main
git fetch origin
git log --pretty="%C(yellow)%h %C(green)(%cr) %C(red)(%ar) %C(white)%s %C(blue)(%an)" -10 origin/main
git rebase origin/main

echo ""
echo "Rebasing ffmpeg"
echo ""

cd ../ffmpeg
git checkout master
git fetch origin
git log --pretty="%C(yellow)%h %C(green)(%cr) %C(red)(%ar) %C(white)%s %C(blue)(%an)" -10 origin/master
git rebase origin/master

echo ""
echo "Rebasing shaderc"
echo ""

cd ../shaderc
git checkout main
git fetch origin
git log --pretty="%C(yellow)%h %C(green)(%cr) %C(red)(%ar) %C(white)%s %C(blue)(%an)" -10 origin/main
git rebase origin/main
cd utils
./git-sync-deps
cd ../third_party/spirv-tools
APPLIED=$(git log --oneline --grep="Fix cpp-8 linking stdc++fs")
if [ "$APPLIED" == "" ]; then
	git am ../../../patches/shaderc/0001-Fix-cpp-8-linking-stdc-fs.patch
else
	echo "Fix cpp-8 linking stdc++fs already applied"
fi
cd ../glslang
APPLIED=$(git log --oneline --grep="glslang: linking stdc++fs")
if [ "$APPLIED" == "" ]; then
        git am ../../../patches/shaderc/0001-glslang-linking-stdc-fs.patch
else
        echo "glslang: linking stdc++fs already applied"
fi
cd ../..

echo ""
echo "Rebasing libplacebo"
echo ""

cd ../libplacebo
git checkout master
git fetch origin
git log --pretty="%C(yellow)%h %C(green)(%cr) %C(red)(%ar) %C(white)%s %C(blue)(%an)" -10 origin/master
git rebase origin/master
git submodule update --init --recursive --rebase

echo ""
echo "Rebasing MPV"
echo ""

cd ../mpv
git checkout master
git fetch origin
git log --pretty="%C(yellow)%h %C(green)(%cr) %C(red)(%ar) %C(white)%s %C(blue)(%an)" -10 origin/master
git rebase origin/master

cd ..
echo ""
echo "Checking for mpv build tools"
echo ""
scripts/mpv-bootstrap

echo ""
echo "Done."
echo ""
